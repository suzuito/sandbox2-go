// Code generated by MockGen. DO NOT EDIT.
// Source: blog/web/presenter.go
//
// Generated by this command:
//
//	mockgen -source blog/web/presenter.go -package web -destination blog/web/presenter_mock.go
//
// Package web is a generated GoMock package.
package web

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockPresenter is a mock of Presenter interface.
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter.
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance.
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// Response mocks base method.
func (m *MockPresenter) Response(ctx *gin.Context, code int, name string, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Response", ctx, code, name, obj)
}

// Response indicates an expected call of Response.
func (mr *MockPresenterMockRecorder) Response(ctx, code, name, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockPresenter)(nil).Response), ctx, code, name, obj)
}
