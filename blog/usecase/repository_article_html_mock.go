// Code generated by MockGen. DO NOT EDIT.
// Source: blog/usecase/repository_article_html.go
//
// Generated by this command:
//
//	mockgen -source blog/usecase/repository_article_html.go -package usecase -destination blog/usecase/repository_article_html_mock.go
//
// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	io "io"
	reflect "reflect"

	entity "github.com/suzuito/sandbox2-go/blog/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryArticleHTML is a mock of RepositoryArticleHTML interface.
type MockRepositoryArticleHTML struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryArticleHTMLMockRecorder
}

// MockRepositoryArticleHTMLMockRecorder is the mock recorder for MockRepositoryArticleHTML.
type MockRepositoryArticleHTMLMockRecorder struct {
	mock *MockRepositoryArticleHTML
}

// NewMockRepositoryArticleHTML creates a new mock instance.
func NewMockRepositoryArticleHTML(ctrl *gomock.Controller) *MockRepositoryArticleHTML {
	mock := &MockRepositoryArticleHTML{ctrl: ctrl}
	mock.recorder = &MockRepositoryArticleHTMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryArticleHTML) EXPECT() *MockRepositoryArticleHTMLMockRecorder {
	return m.recorder
}

// GetArticle mocks base method.
func (m *MockRepositoryArticleHTML) GetArticle(ctx context.Context, articleID entity.ArticleID, articleVersion int32, html io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, articleID, articleVersion, html)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockRepositoryArticleHTMLMockRecorder) GetArticle(ctx, articleID, articleVersion, html any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockRepositoryArticleHTML)(nil).GetArticle), ctx, articleID, articleVersion, html)
}

// SetArticle mocks base method.
func (m *MockRepositoryArticleHTML) SetArticle(ctx context.Context, article *entity.Article, html string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArticle", ctx, article, html)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArticle indicates an expected call of SetArticle.
func (mr *MockRepositoryArticleHTMLMockRecorder) SetArticle(ctx, article, html any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArticle", reflect.TypeOf((*MockRepositoryArticleHTML)(nil).SetArticle), ctx, article, html)
}
