// Code generated by MockGen. DO NOT EDIT.
// Source: internal/blog/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/blog/usecase/usecase.go -package usecase -destination internal/blog/usecase/usecase_mock.go
//
// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/suzuito/sandbox2-go/blog/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GenerateArticleHTML mocks base method.
func (m *MockUsecase) GenerateArticleHTML(ctx context.Context, articleSourceID entity.ArticleSourceID, articleSourceVersion string) (*entity.Article, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateArticleHTML", ctx, articleSourceID, articleSourceVersion)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateArticleHTML indicates an expected call of GenerateArticleHTML.
func (mr *MockUsecaseMockRecorder) GenerateArticleHTML(ctx, articleSourceID, articleSourceVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateArticleHTML", reflect.TypeOf((*MockUsecase)(nil).GenerateArticleHTML), ctx, articleSourceID, articleSourceVersion)
}

// GenerateArticleHTMLFromMarkdown mocks base method.
func (m *MockUsecase) GenerateArticleHTMLFromMarkdown(ctx context.Context, articleSource *entity.ArticleSource, md []byte) (*entity.Article, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateArticleHTMLFromMarkdown", ctx, articleSource, md)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateArticleHTMLFromMarkdown indicates an expected call of GenerateArticleHTMLFromMarkdown.
func (mr *MockUsecaseMockRecorder) GenerateArticleHTMLFromMarkdown(ctx, articleSource, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateArticleHTMLFromMarkdown", reflect.TypeOf((*MockUsecase)(nil).GenerateArticleHTMLFromMarkdown), ctx, articleSource, md)
}

// GenerateSitemap mocks base method.
func (m *MockUsecase) GenerateSitemap(ctx context.Context, siteOrigin string, urls *XMLURLSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSitemap", ctx, siteOrigin, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSitemap indicates an expected call of GenerateSitemap.
func (mr *MockUsecaseMockRecorder) GenerateSitemap(ctx, siteOrigin, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSitemap", reflect.TypeOf((*MockUsecase)(nil).GenerateSitemap), ctx, siteOrigin, urls)
}

// SearchArticles mocks base method.
func (m *MockUsecase) SearchArticles(ctx context.Context, query SearchArticlesQuery, articles *[]entity.Article, hasNext *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArticles", ctx, query, articles, hasNext)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchArticles indicates an expected call of SearchArticles.
func (mr *MockUsecaseMockRecorder) SearchArticles(ctx, query, articles, hasNext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticles", reflect.TypeOf((*MockUsecase)(nil).SearchArticles), ctx, query, articles, hasNext)
}

// UploadAllArticles mocks base method.
func (m *MockUsecase) UploadAllArticles(ctx context.Context, ref string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAllArticles", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAllArticles indicates an expected call of UploadAllArticles.
func (mr *MockUsecaseMockRecorder) UploadAllArticles(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAllArticles", reflect.TypeOf((*MockUsecase)(nil).UploadAllArticles), ctx, ref)
}

// UploadArticle mocks base method.
func (m *MockUsecase) UploadArticle(ctx context.Context, articleSourceID entity.ArticleSourceID, articleSourceVersion string) (*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArticle", ctx, articleSourceID, articleSourceVersion)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadArticle indicates an expected call of UploadArticle.
func (mr *MockUsecaseMockRecorder) UploadArticle(ctx, articleSourceID, articleSourceVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArticle", reflect.TypeOf((*MockUsecase)(nil).UploadArticle), ctx, articleSourceID, articleSourceVersion)
}
