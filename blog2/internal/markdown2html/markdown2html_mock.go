// Code generated by MockGen. DO NOT EDIT.
// Source: blog2/internal/markdown2html/markdown2html.go
//
// Generated by this command:
//
//	mockgen -source blog2/internal/markdown2html/markdown2html.go -package markdown2html -destination blog2/internal/markdown2html/markdown2html_mock.go
//
// Package markdown2html is a generated GoMock package.
package markdown2html

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMarkdown2HTML is a mock of Markdown2HTML interface.
type MockMarkdown2HTML struct {
	ctrl     *gomock.Controller
	recorder *MockMarkdown2HTMLMockRecorder
}

// MockMarkdown2HTMLMockRecorder is the mock recorder for MockMarkdown2HTML.
type MockMarkdown2HTMLMockRecorder struct {
	mock *MockMarkdown2HTML
}

// NewMockMarkdown2HTML creates a new mock instance.
func NewMockMarkdown2HTML(ctrl *gomock.Controller) *MockMarkdown2HTML {
	mock := &MockMarkdown2HTML{ctrl: ctrl}
	mock.recorder = &MockMarkdown2HTMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarkdown2HTML) EXPECT() *MockMarkdown2HTMLMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockMarkdown2HTML) Generate(ctx context.Context, src string, dst *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockMarkdown2HTMLMockRecorder) Generate(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockMarkdown2HTML)(nil).Generate), ctx, src, dst)
}
