// Code generated by MockGen. DO NOT EDIT.
// Source: internal/crawler/crawler/internal/usecase/crawlerfactory/crawlerfactory.go
//
// Generated by this command:
//
//	mockgen -source internal/crawler/crawler/internal/usecase/crawlerfactory/crawlerfactory.go -package crawlerfactory -destination internal/crawler/crawler/internal/usecase/crawlerfactory/crawlerfactory_mock.go
//
// Package crawlerfactory is a generated GoMock package.
package crawlerfactory

import (
	context "context"
	reflect "reflect"

	crawler "github.com/suzuito/sandbox2-go/internal/crawler/crawler/internal/entity/crawler"
	gomock "go.uber.org/mock/gomock"
)

// MockCrawlerFactory is a mock of CrawlerFactory interface.
type MockCrawlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerFactoryMockRecorder
}

// MockCrawlerFactoryMockRecorder is the mock recorder for MockCrawlerFactory.
type MockCrawlerFactoryMockRecorder struct {
	mock *MockCrawlerFactory
}

// NewMockCrawlerFactory creates a new mock instance.
func NewMockCrawlerFactory(ctrl *gomock.Controller) *MockCrawlerFactory {
	mock := &MockCrawlerFactory{ctrl: ctrl}
	mock.recorder = &MockCrawlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerFactory) EXPECT() *MockCrawlerFactoryMockRecorder {
	return m.recorder
}

// GetCrawler mocks base method.
func (m *MockCrawlerFactory) GetCrawler(ctx context.Context, crawlerID crawler.CrawlerID) (crawler.Crawler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawler", ctx, crawlerID)
	ret0, _ := ret[0].(crawler.Crawler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawler indicates an expected call of GetCrawler.
func (mr *MockCrawlerFactoryMockRecorder) GetCrawler(ctx, crawlerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawler", reflect.TypeOf((*MockCrawlerFactory)(nil).GetCrawler), ctx, crawlerID)
}

// GetCrawlers mocks base method.
func (m *MockCrawlerFactory) GetCrawlers(ctx context.Context, crawlerIDs ...crawler.CrawlerID) []crawler.Crawler {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range crawlerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlers", varargs...)
	ret0, _ := ret[0].([]crawler.Crawler)
	return ret0
}

// GetCrawlers indicates an expected call of GetCrawlers.
func (mr *MockCrawlerFactoryMockRecorder) GetCrawlers(ctx any, crawlerIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, crawlerIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlers", reflect.TypeOf((*MockCrawlerFactory)(nil).GetCrawlers), varargs...)
}
