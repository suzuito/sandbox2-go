// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/notifier/internal/entity/notifier/notifier.go
//
// Generated by this command:
//
//	mockgen -source crawler/notifier/internal/entity/notifier/notifier.go -package notifier -destination crawler/notifier/internal/entity/notifier/notifier_mock.go
//
// Package notifier is a generated GoMock package.
package notifier

import (
	context "context"
	reflect "reflect"

	timeseriesdata "github.com/suzuito/sandbox2-go/crawler/pkg/entity/timeseriesdata"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockNotifier) ID() NotifierID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(NotifierID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNotifierMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNotifier)(nil).ID))
}

// NewEmptyTimeSeriesData mocks base method.
func (m *MockNotifier) NewEmptyTimeSeriesData(ctx context.Context) timeseriesdata.TimeSeriesData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEmptyTimeSeriesData", ctx)
	ret0, _ := ret[0].(timeseriesdata.TimeSeriesData)
	return ret0
}

// NewEmptyTimeSeriesData indicates an expected call of NewEmptyTimeSeriesData.
func (mr *MockNotifierMockRecorder) NewEmptyTimeSeriesData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmptyTimeSeriesData", reflect.TypeOf((*MockNotifier)(nil).NewEmptyTimeSeriesData), ctx)
}

// Notify mocks base method.
func (m *MockNotifier) Notify(ctx context.Context, d timeseriesdata.TimeSeriesData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), ctx, d)
}
