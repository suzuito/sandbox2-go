// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/usecase/factory/notifier.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/usecase/factory/notifier.go -package factory -destination crawler/internal/usecase/factory/notifier_mock.go
//
// Package factory is a generated GoMock package.
package factory

import (
	context "context"
	reflect "reflect"

	notifier "github.com/suzuito/sandbox2-go/crawler/pkg/entity/notifier"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifierFactory is a mock of NotifierFactory interface.
type MockNotifierFactory struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierFactoryMockRecorder
}

// MockNotifierFactoryMockRecorder is the mock recorder for MockNotifierFactory.
type MockNotifierFactoryMockRecorder struct {
	mock *MockNotifierFactory
}

// NewMockNotifierFactory creates a new mock instance.
func NewMockNotifierFactory(ctrl *gomock.Controller) *MockNotifierFactory {
	mock := &MockNotifierFactory{ctrl: ctrl}
	mock.recorder = &MockNotifierFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierFactory) EXPECT() *MockNotifierFactoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNotifierFactory) Get(ctx context.Context, def *notifier.NotifierDefinition) (notifier.Notifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, def)
	ret0, _ := ret[0].(notifier.Notifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNotifierFactoryMockRecorder) Get(ctx, def any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotifierFactory)(nil).Get), ctx, def)
}
