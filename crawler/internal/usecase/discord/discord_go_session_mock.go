// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/usecase/discord/discord_go_session.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/usecase/discord/discord_go_session.go -package discord -destination crawler/internal/usecase/discord/discord_go_session_mock.go
//
// Package discord is a generated GoMock package.
package discord

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordGoSession is a mock of DiscordGoSession interface.
type MockDiscordGoSession struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordGoSessionMockRecorder
}

// MockDiscordGoSessionMockRecorder is the mock recorder for MockDiscordGoSession.
type MockDiscordGoSessionMockRecorder struct {
	mock *MockDiscordGoSession
}

// NewMockDiscordGoSession creates a new mock instance.
func NewMockDiscordGoSession(ctrl *gomock.Controller) *MockDiscordGoSession {
	mock := &MockDiscordGoSession{ctrl: ctrl}
	mock.recorder = &MockDiscordGoSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordGoSession) EXPECT() *MockDiscordGoSessionMockRecorder {
	return m.recorder
}

// ChannelMessageSend mocks base method.
func (m *MockDiscordGoSession) ChannelMessageSend(channelID, data string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockDiscordGoSessionMockRecorder) ChannelMessageSend(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockDiscordGoSession)(nil).ChannelMessageSend), varargs...)
}

// ChannelMessageSendComplex mocks base method.
func (m *MockDiscordGoSession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockDiscordGoSessionMockRecorder) ChannelMessageSendComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockDiscordGoSession)(nil).ChannelMessageSendComplex), varargs...)
}
