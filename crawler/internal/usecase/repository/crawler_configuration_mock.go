// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/usecase/repository/crawler_configuration.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/usecase/repository/crawler_configuration.go -package repository -destination crawler/internal/usecase/repository/crawler_configuration_mock.go
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	crawler "github.com/suzuito/sandbox2-go/crawler/pkg/entity/crawler"
	gomock "go.uber.org/mock/gomock"
)

// MockCrawlerConfigurationRepository is a mock of CrawlerConfigurationRepository interface.
type MockCrawlerConfigurationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerConfigurationRepositoryMockRecorder
}

// MockCrawlerConfigurationRepositoryMockRecorder is the mock recorder for MockCrawlerConfigurationRepository.
type MockCrawlerConfigurationRepositoryMockRecorder struct {
	mock *MockCrawlerConfigurationRepository
}

// NewMockCrawlerConfigurationRepository creates a new mock instance.
func NewMockCrawlerConfigurationRepository(ctrl *gomock.Controller) *MockCrawlerConfigurationRepository {
	mock := &MockCrawlerConfigurationRepository{ctrl: ctrl}
	mock.recorder = &MockCrawlerConfigurationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerConfigurationRepository) EXPECT() *MockCrawlerConfigurationRepositoryMockRecorder {
	return m.recorder
}

// GetDispatchCrawlSetting mocks base method.
func (m *MockCrawlerConfigurationRepository) GetDispatchCrawlSetting(ctx context.Context) (*crawler.DispatchCrawlSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDispatchCrawlSetting", ctx)
	ret0, _ := ret[0].(*crawler.DispatchCrawlSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDispatchCrawlSetting indicates an expected call of GetDispatchCrawlSetting.
func (mr *MockCrawlerConfigurationRepositoryMockRecorder) GetDispatchCrawlSetting(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDispatchCrawlSetting", reflect.TypeOf((*MockCrawlerConfigurationRepository)(nil).GetDispatchCrawlSetting), ctx)
}
