// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/usecase/repository/crawler.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/usecase/repository/crawler.go -package repository -destination crawler/internal/usecase/repository/crawler_mock.go
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	crawler "github.com/suzuito/sandbox2-go/crawler/pkg/entity/crawler"
	gomock "go.uber.org/mock/gomock"
)

// MockCrawlerRepository is a mock of CrawlerRepository interface.
type MockCrawlerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerRepositoryMockRecorder
}

// MockCrawlerRepositoryMockRecorder is the mock recorder for MockCrawlerRepository.
type MockCrawlerRepositoryMockRecorder struct {
	mock *MockCrawlerRepository
}

// NewMockCrawlerRepository creates a new mock instance.
func NewMockCrawlerRepository(ctrl *gomock.Controller) *MockCrawlerRepository {
	mock := &MockCrawlerRepository{ctrl: ctrl}
	mock.recorder = &MockCrawlerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerRepository) EXPECT() *MockCrawlerRepositoryMockRecorder {
	return m.recorder
}

// GetCrawlerDefinition mocks base method.
func (m *MockCrawlerRepository) GetCrawlerDefinition(ctx context.Context, id crawler.CrawlerID) (*crawler.CrawlerDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerDefinition", ctx, id)
	ret0, _ := ret[0].(*crawler.CrawlerDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlerDefinition indicates an expected call of GetCrawlerDefinition.
func (mr *MockCrawlerRepositoryMockRecorder) GetCrawlerDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerDefinition", reflect.TypeOf((*MockCrawlerRepository)(nil).GetCrawlerDefinition), ctx, id)
}

// GetCrawlerStarterSettings mocks base method.
func (m *MockCrawlerRepository) GetCrawlerStarterSettings(ctx context.Context, starterID crawler.CrawlerStarterSettingID) ([]*crawler.CrawlerStarterSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerStarterSettings", ctx, starterID)
	ret0, _ := ret[0].([]*crawler.CrawlerStarterSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlerStarterSettings indicates an expected call of GetCrawlerStarterSettings.
func (mr *MockCrawlerRepositoryMockRecorder) GetCrawlerStarterSettings(ctx, starterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerStarterSettings", reflect.TypeOf((*MockCrawlerRepository)(nil).GetCrawlerStarterSettings), ctx, starterID)
}
