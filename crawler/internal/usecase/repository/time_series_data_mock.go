// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/usecase/repository/time_series_data.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/usecase/repository/time_series_data.go -package repository -destination crawler/internal/usecase/repository/time_series_data_mock.go
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	timeseriesdata "github.com/suzuito/sandbox2-go/crawler/pkg/entity/timeseriesdata"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeSeriesDataRepository is a mock of TimeSeriesDataRepository interface.
type MockTimeSeriesDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSeriesDataRepositoryMockRecorder
}

// MockTimeSeriesDataRepositoryMockRecorder is the mock recorder for MockTimeSeriesDataRepository.
type MockTimeSeriesDataRepositoryMockRecorder struct {
	mock *MockTimeSeriesDataRepository
}

// NewMockTimeSeriesDataRepository creates a new mock instance.
func NewMockTimeSeriesDataRepository(ctrl *gomock.Controller) *MockTimeSeriesDataRepository {
	mock := &MockTimeSeriesDataRepository{ctrl: ctrl}
	mock.recorder = &MockTimeSeriesDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeSeriesDataRepository) EXPECT() *MockTimeSeriesDataRepositoryMockRecorder {
	return m.recorder
}

// GetTimeSeriesDataFromFullPathFirestore mocks base method.
func (m *MockTimeSeriesDataRepository) GetTimeSeriesDataFromFullPathFirestore(ctx context.Context, fulPath string, d timeseriesdata.TimeSeriesData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesDataFromFullPathFirestore", ctx, fulPath, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTimeSeriesDataFromFullPathFirestore indicates an expected call of GetTimeSeriesDataFromFullPathFirestore.
func (mr *MockTimeSeriesDataRepositoryMockRecorder) GetTimeSeriesDataFromFullPathFirestore(ctx, fulPath, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesDataFromFullPathFirestore", reflect.TypeOf((*MockTimeSeriesDataRepository)(nil).GetTimeSeriesDataFromFullPathFirestore), ctx, fulPath, d)
}

// SetTimeSeriesData mocks base method.
func (m *MockTimeSeriesDataRepository) SetTimeSeriesData(ctx context.Context, timeSeriesDataBaseID timeseriesdata.TimeSeriesDataBaseID, timeSeriesData ...timeseriesdata.TimeSeriesData) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeSeriesDataBaseID}
	for _, a := range timeSeriesData {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTimeSeriesData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeSeriesData indicates an expected call of SetTimeSeriesData.
func (mr *MockTimeSeriesDataRepositoryMockRecorder) SetTimeSeriesData(ctx, timeSeriesDataBaseID any, timeSeriesData ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeSeriesDataBaseID}, timeSeriesData...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeSeriesData", reflect.TypeOf((*MockTimeSeriesDataRepository)(nil).SetTimeSeriesData), varargs...)
}
