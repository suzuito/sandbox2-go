// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/internal/infra/fetcher/httpclientwrapper/http_client_wrapper.go
//
// Generated by this command:
//
//	mockgen -source crawler/internal/infra/fetcher/httpclientwrapper/http_client_wrapper.go -package httpclientwrapper -destination crawler/internal/infra/fetcher/httpclientwrapper/http_client_wrapper_mock.go
//
// Package httpclientwrapper is a generated GoMock package.
package httpclientwrapper

import (
	context "context"
	io "io"
	slog "log/slog"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientWrapper is a mock of HTTPClientWrapper interface.
type MockHTTPClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientWrapperMockRecorder
}

// MockHTTPClientWrapperMockRecorder is the mock recorder for MockHTTPClientWrapper.
type MockHTTPClientWrapperMockRecorder struct {
	mock *MockHTTPClientWrapper
}

// NewMockHTTPClientWrapper creates a new mock instance.
func NewMockHTTPClientWrapper(ctrl *gomock.Controller) *MockHTTPClientWrapper {
	mock := &MockHTTPClientWrapper{ctrl: ctrl}
	mock.recorder = &MockHTTPClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientWrapper) EXPECT() *MockHTTPClientWrapperMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClientWrapper) Do(ctx context.Context, logger *slog.Logger, req *http.Request, w io.Writer, statusCodesSuccess []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, logger, req, w, statusCodesSuccess)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientWrapperMockRecorder) Do(ctx, logger, req, w, statusCodesSuccess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientWrapper)(nil).Do), ctx, logger, req, w, statusCodesSuccess)
}
