// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/crawler/internal/entity/crawler/crawler.go
//
// Generated by this command:
//
//	mockgen -source crawler/crawler/internal/entity/crawler/crawler.go -package crawler -destination crawler/crawler/internal/entity/crawler/crawler_mock.go
//
// Package crawler is a generated GoMock package.
package crawler

import (
	context "context"
	io "io"
	reflect "reflect"

	timeseriesdata "github.com/suzuito/sandbox2-go/crawler/pkg/entity/timeseriesdata"
	gomock "go.uber.org/mock/gomock"
)

// MockCrawler is a mock of Crawler interface.
type MockCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMockRecorder
}

// MockCrawlerMockRecorder is the mock recorder for MockCrawler.
type MockCrawlerMockRecorder struct {
	mock *MockCrawler
}

// NewMockCrawler creates a new mock instance.
func NewMockCrawler(ctrl *gomock.Controller) *MockCrawler {
	mock := &MockCrawler{ctrl: ctrl}
	mock.recorder = &MockCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawler) EXPECT() *MockCrawlerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockCrawler) Fetch(ctx context.Context, w io.Writer, msg CrawlerInputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, w, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockCrawlerMockRecorder) Fetch(ctx, w, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCrawler)(nil).Fetch), ctx, w, msg)
}

// ID mocks base method.
func (m *MockCrawler) ID() CrawlerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(CrawlerID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCrawlerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCrawler)(nil).ID))
}

// Name mocks base method.
func (m *MockCrawler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCrawlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCrawler)(nil).Name))
}

// Parse mocks base method.
func (m *MockCrawler) Parse(ctx context.Context, r io.Reader, msg CrawlerInputData) ([]timeseriesdata.TimeSeriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, r, msg)
	ret0, _ := ret[0].([]timeseriesdata.TimeSeriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockCrawlerMockRecorder) Parse(ctx, r, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockCrawler)(nil).Parse), ctx, r, msg)
}

// Publish mocks base method.
func (m *MockCrawler) Publish(ctx context.Context, msg CrawlerInputData, data ...timeseriesdata.TimeSeriesData) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockCrawlerMockRecorder) Publish(ctx, msg any, data ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCrawler)(nil).Publish), varargs...)
}
