// Code generated by MockGen. DO NOT EDIT.
// Source: crawler/crawler/internal/usecase/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source crawler/crawler/internal/usecase/repository/repository.go -package repository -destination crawler/crawler/internal/usecase/repository/repository_mock.go
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	crawler "github.com/suzuito/sandbox2-go/crawler/crawler/internal/entity/crawler"
	timeseriesdata "github.com/suzuito/sandbox2-go/crawler/pkg/entity/timeseriesdata"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// SetTimeSeriesData mocks base method.
func (m *MockRepository) SetTimeSeriesData(ctx context.Context, crawlerID crawler.CrawlerID, timeSeriesData ...timeseriesdata.TimeSeriesData) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, crawlerID}
	for _, a := range timeSeriesData {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTimeSeriesData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeSeriesData indicates an expected call of SetTimeSeriesData.
func (mr *MockRepositoryMockRecorder) SetTimeSeriesData(ctx, crawlerID any, timeSeriesData ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, crawlerID}, timeSeriesData...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeSeriesData", reflect.TypeOf((*MockRepository)(nil).SetTimeSeriesData), varargs...)
}
